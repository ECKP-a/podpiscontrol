from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re
from datetime import datetime, timedelta

class DatabaseManager:
    def __init__(self):
        self.db_path = '/tmp/subscriptions.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT,
                    price REAL,
                    charge_day INTEGER,
                    next_charge_date TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def add_subscription(self, user_id, service_name, price, charge_day, next_charge_date):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id FROM subscriptions 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            existing = cursor.fetchone()
            if existing:
                conn.close()
                return False, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            cursor.execute('''
                INSERT INTO subscriptions (user_id, service_name, price, charge_day, next_charge_date)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, service_name, price, charge_day, next_charge_date))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT service_name, price, charge_day, next_charge_date 
                FROM subscriptions 
                WHERE user_id = ? AND is_active = TRUE
                ORDER BY service_name
            ''', (user_id,))
            
            subscriptions = cursor.fetchall()
            conn.close()
            return subscriptions
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def delete_subscription(self, user_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET is_active = FALSE 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    POPULAR_SUBSCRIPTIONS = {
        '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': {'price': 399, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–°–±–µ—Ä–ü—Ä–∞–π–º': {'price': 299, 'description': 'Okko, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'Ozon Premium': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–í–ë –ö–ª—É–±': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'VK –ú—É–∑—ã–∫–∞': {'price': 199, 'description': '–ú—É–∑—ã–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'},
        '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞': {'price': 169, 'description': '–ö–∞—Ç–∞–ª–æ–≥ –º—É–∑—ã–∫–∏'},
        'IVI': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        'START': {'price': 299, 'description': '–†—É—Å—Å–∫–∏–µ —Å–µ—Ä–∏–∞–ª—ã'},
        'More.tv': {'price': 299, 'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'},
        'Wink': {'price': 349, 'description': '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –∫–∏–Ω–æ'},
        '–ö–∏–Ω–æ–ø–æ–∏—Å–∫': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        '–ú–¢–° Premium': {'price': 299, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, —Å–∫–∏–¥–∫–∏'}
    }
    
    @classmethod
    def get_main_keyboard(cls):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 6 –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        return {
            'keyboard': [
                [{'text': '/start'}, {'text': '/subs'}],
                [{'text': '/help'}, {'text': '/laws'}],
                [{'text': '/sets'}, {'text': '/unsub'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscriptions_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        subscriptions = list(cls.POPULAR_SUBSCRIPTIONS.keys())
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—è–¥
        for i in range(0, len(subscriptions), 2):
            if i + 1 < len(subscriptions):
                keyboard.append([{'text': subscriptions[i]}, {'text': subscriptions[i+1]}])
            else:
                keyboard.append([{'text': subscriptions[i]}])
        
        keyboard.extend([
            [{'text': '‚ûï –°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'}],
            [{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}]
        ])
        
        return {
            'keyboard': keyboard,
            'resize_keyboard': True
        }
    
    @classmethod
    def get_cancel_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
        return {
            'keyboard': [[{'text': '‚ùå –û—Ç–º–µ–Ω–∞'}]],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscription_info(cls, service_name):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        return cls.POPULAR_SUBSCRIPTIONS.get(service_name)

class BotHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.db = DatabaseManager()
        self.sub_manager = SubscriptionManager()
        self.user_sessions = {}
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('üéØ –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç!'.encode('utf-8'))
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                response = self.process_message(chat_id, text)
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
        except Exception as e:
            print(f'Error: {e}')
        
        self.send_response(200)
        self.end_headers()
    
    def process_message(self, chat_id, text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        if chat_id in self.user_sessions and self.user_sessions[chat_id].get('adding_subscription'):
            return self._handle_subscription_flow(chat_id, text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
        if text == '‚ùå –û—Ç–º–µ–Ω–∞' or text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            if chat_id in self.user_sessions:
                del self.user_sessions[chat_id]
            return self._show_main_menu(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text == '/start':
            return self._show_main_menu(chat_id)
        
        elif text == '/subs':
            return self._show_subscriptions_menu(chat_id)
        
        elif text == '/help':
            return self._show_help(chat_id)
        
        elif text == '/laws':
            return self._show_laws(chat_id)
        
        elif text == '/sets':
            return self._show_settings(chat_id)
        
        elif text == '/unsub':
            return self._show_unsubscribe(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        elif text in self.sub_manager.POPULAR_SUBSCRIPTIONS:
            return self._show_subscription_info(chat_id, text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        elif text.startswith('‚úÖ '):
            service_name = text.replace('‚úÖ ', '')
            return self._add_popular_subscription(chat_id, service_name)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        elif text.startswith('‚ùå '):
            service_name = text.replace('‚ùå ', '')
            return self._delete_subscription(chat_id, service_name)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
        elif text == '‚ûï –°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
            return self._start_custom_subscription(chat_id)
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return self._show_main_menu(chat_id)
    
    def _show_main_menu(self, chat_id):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 6 –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """üéØ *–ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/subs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
/help - –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
/laws - –ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
/sets - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/unsub - –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:""",
            'reply_markup': self.sub_manager.get_main_keyboard(),
            'parse_mode': 'Markdown'
        }
    
    def _show_subscriptions_menu(self, chat_id):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': 'üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é:',
            'reply_markup': self.sub_manager.get_subscriptions_keyboard(),
            'parse_mode': 'Markdown'
        }
    
    def _show_subscription_info(self, chat_id, service_name):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        info = self.sub_manager.get_subscription_info(service_name)
        keyboard = {
            'keyboard': [
                [{'text': f'‚úÖ {service_name}'}],
                [{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}]
            ],
            'resize_keyboard': True
        }
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': f'*{service_name}*\n\nüí≥ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {info["price"]} —Ä—É–±/–º–µ—Å\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {info["description"]}\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?',
            'reply_markup': keyboard,
            'parse_mode': 'Markdown'
        }
    
    def _add_popular_subscription(self, chat_id, service_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        info = self.sub_manager.get_subscription_info(service_name)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        today = datetime.now()
        if today.day > 1:
            next_month = today.replace(day=1) + timedelta(days=32)
            next_charge_date = next_month.replace(day=1).strftime("%d.%m.%Y")
        else:
            next_charge_date = today.replace(day=1).strftime("%d.%m.%Y")
        
        success, message = self.db.add_subscription(
            chat_id, 
            service_name, 
            info['price'], 
            1,
            next_charge_date
        )
        
        if success:
            response_text = f'‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\nüì∫ *{service_name}*\nüí≥ {info["price"]} —Ä—É–±/–º–µ—Å\nüìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_date}'
        else:
            response_text = f'‚ùå *{message}*'
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _start_custom_subscription(self, chat_id):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        self.user_sessions[chat_id] = {
            'adding_subscription': True,
            'step': 'name'
        }
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_cancel_keyboard()
        }
    
    def _handle_subscription_flow(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        session = self.user_sessions[chat_id]
        
        if session['step'] == 'name':
            session['name'] = text
            session['step'] = 'price'
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': 'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö:',
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_cancel_keyboard()
            }
        
        elif session['step'] == 'price':
            try:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_text = re.sub(r'[^\d,.]', '', text.replace(',', '.'))
                price = float(clean_text)
                
                if price <= 0:
                    raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                
                session['price'] = price
                session['step'] = 'date'
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': 'üìÖ –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ?\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞:',
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
                
            except (ValueError, TypeError):
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:',
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
        
        elif session['step'] == 'date':
            try:
                today = datetime.now()
                
                if re.match(r'^\d{1,2}\.\d{1,2}\.\d{4}$', text):
                    charge_date = datetime.strptime(text, "%d.%m.%Y")
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                elif re.match(r'^\d{1,2}$', text):
                    day = int(text)
                    if 1 <= day <= 31:
                        if today.day <= day:
                            next_date = today.replace(day=day)
                        else:
                            next_month = today.replace(day=1) + timedelta(days=32)
                            next_date = next_month.replace(day=day)
                        next_charge_date = next_date.strftime("%d.%m.%Y")
                        charge_day = day
                    else:
                        raise ValueError("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31")
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                success, message = self.db.add_subscription(
                    chat_id, 
                    session['name'], 
                    session['price'], 
                    charge_day,
                    next_charge_date
                )
                
                del self.user_sessions[chat_id]
                
                if success:
                    response_text = f'‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\nüì∫ *{session["name"]}*\nüí≥ {session["price"]} —Ä—É–±/–º–µ—Å\nüìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_date}'
                else:
                    response_text = f'‚ùå *{message}*'
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': response_text,
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_main_keyboard()
                }
                
            except ValueError as e:
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ —á–∏—Å–ª–æ:',
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
    
    def _show_help(self, chat_id):
        """–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """‚ùì *–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*

*–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*

‚Ä¢ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subs –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é

‚Ä¢ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsub

‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —Å–ø–∏—Å–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è?
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–∏—Å–∞ –∏ —Å—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –§–ó-376

*–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å?*
–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É - –º—ã –ø–æ–º–æ–∂–µ–º!""",
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_laws(self, chat_id):
        """–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó*

*–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:*

‚Ä¢ –ó–∞–ø—Ä–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
‚Ä¢ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

*–í—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É:* 1 –º–∞—Ä—Ç–∞ 2026 –≥–æ–¥–∞

*–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.*""",
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_settings(self, chat_id):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–ø–∏—Å–∞–Ω–∏—è—Ö
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!""",
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_unsubscribe(self, chat_id):
        """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.',
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        keyboard = []
        for name, price, day, next_date in subscriptions:
            keyboard.append([{'text': f'‚ùå {name}'}])
        
        keyboard.append([{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': 'üóëÔ∏è *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
            'parse_mode': 'Markdown'
        }
    
    def _delete_subscription(self, chat_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        success, message = self.db.delete_subscription(chat_id, service_name)
        
        if success:
            response_text = f'‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞:* {service_name}'
        else:
            response_text = f'‚ùå *–û—à–∏–±–∫–∞:* {message}'
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }

handler = BotHandler