from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re
from datetime import datetime, timedelta
import time

class DatabaseManager:
    def __init__(self):
        self.db_path = '/tmp/subscriptions.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT,
                    price REAL,
                    charge_day INTEGER,
                    next_charge_date TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS reminders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    subscription_id INTEGER,
                    days_before INTEGER DEFAULT 3,
                    is_active BOOLEAN DEFAULT TRUE,
                    FOREIGN KEY (subscription_id) REFERENCES subscriptions (id)
                )
            ''')
            
            conn.commit()
            conn.close()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def add_subscription(self, user_id, service_name, price, charge_day, next_charge_date):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute('''
                SELECT id FROM subscriptions 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            existing = cursor.fetchone()
            if existing:
                conn.close()
                return False, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            cursor.execute('''
                INSERT INTO subscriptions (user_id, service_name, price, charge_day, next_charge_date)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, service_name, price, charge_day, next_charge_date))
            
            subscription_id = cursor.lastrowid
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∑–∞ 3 –¥–Ω—è)
            cursor.execute('''
                INSERT INTO reminders (user_id, subscription_id, days_before, is_active)
                VALUES (?, ?, ?, ?)
            ''', (user_id, subscription_id, 3, True))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT s.id, s.service_name, s.price, s.charge_day, s.next_charge_date,
                       r.days_before, r.is_active as reminder_active
                FROM subscriptions s
                LEFT JOIN reminders r ON s.id = r.subscription_id
                WHERE s.user_id = ? AND s.is_active = TRUE
                ORDER BY s.service_name
            ''', (user_id,))
            
            subscriptions = cursor.fetchall()
            conn.close()
            return subscriptions
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def delete_subscription(self, user_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET is_active = FALSE 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def update_reminder_settings(self, user_id, subscription_id, days_before, is_active):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO reminders (user_id, subscription_id, days_before, is_active)
                VALUES (?, ?, ?, ?)
            ''', (user_id, subscription_id, days_before, is_active))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return False

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    POPULAR_SUBSCRIPTIONS = {
        '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': {'price': 399, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–°–±–µ—Ä–ü—Ä–∞–π–º': {'price': 299, 'description': 'Okko, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'Ozon Premium': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–í–ë –ö–ª—É–±': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'VK –ú—É–∑—ã–∫–∞': {'price': 199, 'description': '–ú—É–∑—ã–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'},
        '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞': {'price': 169, 'description': '–ö–∞—Ç–∞–ª–æ–≥ –º—É–∑—ã–∫–∏'},
        'IVI': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        'START': {'price': 299, 'description': '–†—É—Å—Å–∫–∏–µ —Å–µ—Ä–∏–∞–ª—ã'},
        'More.tv': {'price': 299, 'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'},
        'Wink': {'price': 349, 'description': '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –∫–∏–Ω–æ'},
        'PREMIER': {'price': 399, 'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤—ã –∏ —à–æ—É'},
        '–ö–∏–Ω–æ–ø–æ–∏—Å–∫': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        '–ú–∞–≥–Ω–∏—Ç –ü—Ä–µ–º–∏—É–º': {'price': 199, 'description': '–°–∫–∏–¥–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö'},
        'Alfa Only': {'price': 199, 'description': '–ü—Ä–µ–º–∏—É–º –±–∞–Ω–∫'},
        '–í–¢–ë –ü–ª—é—Å': {'price': 199, 'description': '–ü–æ–¥–ø–∏—Å–∫–∞ –í–¢–ë'},
        '–ú–¢–° Premium': {'price': 299, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, —Å–∫–∏–¥–∫–∏'},
        '–¢-–ë–∞–Ω–∫ Pro': {'price': 299, 'description': '–ü—Ä–µ–º–∏—É–º –±–∞–Ω–∫'},
        '–ì–∞–∑–ø—Ä–æ–º –ë–æ–Ω—É—Å': {'price': 299, 'description': '–¢–æ–ø–ª–∏–≤–æ –∏ –ø–æ–¥–ø–∏—Å–∫–∏'},
        '–ü–∞–∫–µ—Ç X5': {'price': 149, 'description': '–°–∫–∏–¥–∫–∏ –≤ –ü—è—Ç–µ—Ä–æ—á–∫–µ'},
        '–°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏': {'price': 300, 'description': '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–≤—è–∑—å'}
    }
    
    @classmethod
    def get_main_keyboard(cls):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        return {
            'keyboard': [
                [{'text': 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}, {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}],
                [{'text': 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'}, {'text': 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'}],
                [{'text': '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ'}, {'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscriptions_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        subscriptions = list(cls.POPULAR_SUBSCRIPTIONS.keys())
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        for i in range(0, min(12, len(subscriptions)), 2):
            row = [
                {'text': subscriptions[i]}, 
                {'text': subscriptions[i+1] if i+1 < len(subscriptions) else 'üîç –ï—â–µ...'}
            ]
            keyboard.append(row)
        
        # –°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [{'text': '‚ûï –°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'}, {'text': 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}],
            [{'text': '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}, {'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'}],
            [{'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}]
        ])
        
        return {
            'keyboard': keyboard,
            'resize_keyboard': True
        }
    
    @classmethod
    def get_cancel_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
        return {
            'keyboard': [[{'text': '‚ùå –û—Ç–º–µ–Ω–∞'}]],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_reminder_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        return {
            'keyboard': [
                [{'text': 'üéØ –ó–∞ 3 –¥–Ω—è'}, {'text': '‚ö° –ó–∞ 1 –¥–µ–Ω—å'}],
                [{'text': 'üìÖ –í –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è'}, {'text': 'üîï –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_back_keyboard(cls):
        """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
        return {
            'keyboard': [[{'text': 'üîô –ù–∞–∑–∞–¥'}]],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscription_info(cls, service_name):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        return cls.POPULAR_SUBSCRIPTIONS.get(service_name)

class BotHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.db = DatabaseManager()
        self.sub_manager = SubscriptionManager()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_sessions = {}
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('üéØ –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç!'.encode('utf-8'))
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                response = self.process_message(chat_id, text)
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
        except Exception as e:
            print(f'Error: {e}')
        
        self.send_response(200)
        self.end_headers()
    
    def process_message(self, chat_id, text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        if chat_id in self.user_sessions and self.user_sessions[chat_id].get('adding_subscription'):
            return self._handle_subscription_flow(chat_id, text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if chat_id in self.user_sessions and self.user_sessions[chat_id].get('setting_reminder'):
            return self._handle_reminder_setup(chat_id, text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∞"
        if text == '‚ùå –û—Ç–º–µ–Ω–∞' or text == 'üîô –ù–∞–∑–∞–¥':
            if chat_id in self.user_sessions:
                del self.user_sessions[chat_id]
            return self.process_message(chat_id, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        
        if text == '/start' or text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': """üéØ *–ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫*  
*–í–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*

‚öñÔ∏è *–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –§–ó-376*
üíé *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–ª–∞—Ç–µ–∂–µ–π*  
üìä *–£–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤*

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*""",
                'reply_markup': self.sub_manager.get_main_keyboard(),
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
            return self._show_analytics(chat_id)
        
        elif text == 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                total = sum(sub[2] for sub in subscriptions)
                sub_list = []
                
                for sub_id, name, price, charge_day, next_date, days_before, reminder_active in subscriptions:
                    reminder_status = "üîî" if reminder_active else "üîï"
                    sub_list.append(f"{reminder_status} *{name}*: {price} —Ä—É–±\n   üìÖ –°–ª–µ–¥. —Å–ø–∏—Å–∞–Ω–∏–µ: {next_date}")
                
                message = f"*üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n" + "\n\n".join(sub_list) + f"\n\n*üí∞ –ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü:* {total} —Ä—É–±\n*üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:* {len(subscriptions)}"
            else:
                message = "*üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'!"
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' or text == '‚ûï –°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            self.user_sessions[chat_id] = {
                'adding_subscription': True,
                'step': 'name'
            }
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': """‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*

*–®–∞–≥ 1 –∏–∑ 3*
–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:

*–ü—Ä–∏–º–µ—Ä:*
Netflix, –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å, –°–ø–æ—Ä—Ç–∑–∞–ª""",
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_cancel_keyboard()
            }
        
        elif text in self.sub_manager.POPULAR_SUBSCRIPTIONS:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            info = self.sub_manager.get_subscription_info(text)
            keyboard = {
                'keyboard': [
                    [{'text': f'‚úÖ –î–æ–±–∞–≤–∏—Ç—å {text}'}],
                    [{'text': 'üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º'}, {'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}]
                ],
                'resize_keyboard': True
            }
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'*{text}*\n\n*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:* {info["price"]} —Ä—É–±/–º–µ—Å\n*üìù –û–ø–∏—Å–∞–Ω–∏–µ:* {info["description"]}\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?',
                'reply_markup': keyboard,
                'parse_mode': 'Markdown'
            }
        
        elif text.startswith('‚úÖ –î–æ–±–∞–≤–∏—Ç—å '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            service_name = text.replace('‚úÖ –î–æ–±–∞–≤–∏—Ç—å ', '')
            info = self.sub_manager.get_subscription_info(service_name)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è (1 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
            today = datetime.now()
            if today.day > 1:
                next_month = today.replace(day=1) + timedelta(days=32)
                next_charge_date = next_month.replace(day=1).strftime("%d.%m.%Y")
            else:
                next_charge_date = today.replace(day=1).strftime("%d.%m.%Y")
            
            success, message = self.db.add_subscription(
                chat_id, 
                service_name, 
                info['price'], 
                1,  # –°–ø–∏—Å–∞–Ω–∏–µ 1 —á–∏—Å–ª–∞
                next_charge_date
            )
            
            response_text = f'*‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n*üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ:* {service_name}\n*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:* {info["price"]} —Ä—É–±/–º–µ—Å\n*üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:* {next_charge_date}\n\nüîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è*'
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': response_text,
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                keyboard = []
                for sub_id, name, price, charge_day, next_date, days_before, reminder_active in subscriptions:
                    keyboard.append([{'text': f'‚ùå –£–¥–∞–ª–∏—Ç—å {name}'}])
                keyboard.append([{'text': 'üîô –ù–∞–∑–∞–¥'}, {'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '*‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                    'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
                    'parse_mode': 'Markdown'
                }
            else:
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
                    'reply_markup': self.sub_manager.get_main_keyboard()
                }
        
        elif text.startswith('‚ùå –£–¥–∞–ª–∏—Ç—å '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            service_name = text.replace('‚ùå –£–¥–∞–ª–∏—Ç—å ', '')
            success, message = self.db.delete_subscription(chat_id, service_name)
            
            response_text = f'*‚úÖ {message}*\n\n–ü–æ–¥–ø–∏—Å–∫–∞: {service_name}' if success else f'*‚ùå {message}*'
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': response_text,
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' or text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' or text == 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                keyboard = []
                for sub_id, name, price, charge_day, next_date, days_before, reminder_active in subscriptions:
                    status = "üîî" if reminder_active else "üîï"
                    keyboard.append([{'text': f'‚öôÔ∏è {status} {name}'}])
                keyboard.append([{'text': 'üîô –ù–∞–∑–∞–¥'}, {'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:',
                    'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
                    'parse_mode': 'Markdown'
                }
            else:
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
                    'reply_markup': self.sub_manager.get_main_keyboard()
                }
        
        elif text.startswith('‚öôÔ∏è '):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            parts = text.split(' ', 2)
            if len(parts) >= 3:
                service_name = parts[2]
                subscriptions = self.db.get_user_subscriptions(chat_id)
                
                for sub in subscriptions:
                    if sub[1] == service_name:
                        self.user_sessions[chat_id] = {
                            'setting_reminder': True,
                            'subscription_id': sub[0],
                            'service_name': service_name,
                            'current_days_before': sub[5],
                            'current_active': sub[6]
                        }
                        
                        status = "–≤–∫–ª—é—á–µ–Ω—ã" if sub[6] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
                        reminder_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if sub[5] == 0 else f"–∑–∞ {sub[5]} –¥–Ω—è"
                        return {
                            'method': 'sendMessage',
                            'chat_id': chat_id,
                            'text': f'*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è "{service_name}"*\n\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ *{reminder_text}*\n–°—Ç–∞—Ç—É—Å: *{status}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
                            'parse_mode': 'Markdown',
                            'reply_markup': self.sub_manager.get_reminder_keyboard()
                        }
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        elif text in ['üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º', 'üîç –ï—â–µ...']:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '*üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:',
                'reply_markup': self.sub_manager.get_subscriptions_keyboard(),
                'parse_mode': 'Markdown'
            }
        
        elif text == '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': """‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó*  
*–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π*

*–ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:*
–° 1 –º–∞—Ä—Ç–∞ 2026 –≥–æ–¥–∞ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –º–æ–≥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.

*–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –≤–∞—Å:*
‚úÖ –ë–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–ª–∞—Ç–µ–∂–∞–º–∏
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π  
‚úÖ –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–º–µ–Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

*–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç:*
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏""",
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–ø–æ—Ä—Ç–∑–∞–ª")
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É
            self.user_sessions[chat_id] = {
                'adding_subscription': True,
                'step': 'name',
                'name': text  # –£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            }
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f"""‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*

–í—ã –≤–≤–µ–ª–∏: *{text}*

*–®–∞–≥ 2 –∏–∑ 3*
–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö:""",
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_cancel_keyboard()
            }
    
    def _handle_subscription_flow(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        session = self.user_sessions[chat_id]
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            del self.user_sessions[chat_id]
            return self.process_message(chat_id, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        
        if session['step'] == 'name':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            session['name'] = text
            session['step'] = 'price'
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': """‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*

*–®–∞–≥ 2 –∏–∑ 3*
–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö:""",
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_cancel_keyboard()
            }
        
        elif session['step'] == 'price':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
            try:
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
                clean_text = re.sub(r'[^\d,.]', '', text.replace(',', '.'))
                price = float(clean_text)
                if price <= 0:
                    raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                    
                session['price'] = price
                session['step'] = 'date'
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': f"""‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*

*–®–∞–≥ 3 –∏–∑ 3*
–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ?

*–í–∞—Ä–∏–∞–Ω—Ç—ã:*
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞: 15.06.2024
‚Ä¢ –ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞: 25
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: —Å–µ–π—á–∞—Å""",
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
            except (ValueError, TypeError):
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:',
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
        
        elif session['step'] == 'date':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            try:
                today = datetime.now()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                if text.lower() in ['—Å–µ–π—á–∞—Å', '—Å–µ–≥–æ–¥–Ω—è', 'today', 'now']:
                    charge_date = today
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                elif re.match(r'^\d{1,2}\.\d{1,2}\.\d{4}$', text):  # –§–æ—Ä–º–∞—Ç 15.06.2024
                    charge_date = datetime.strptime(text, "%d.%m.%Y")
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                elif re.match(r'^\d{1,2}$', text):  # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
                    day = int(text)
                    if 1 <= day <= 31:
                        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
                        if today.day <= day:
                            next_date = today.replace(day=day)
                        else:
                            next_month = today.replace(day=1) + timedelta(days=32)
                            next_date = next_month.replace(day=min(day, 28))  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–µ–≤—Ä–∞–ª—è
                            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            while next_date.day != day and next_date.day < day:
                                next_date += timedelta(days=1)
                        
                        next_charge_date = next_date.strftime("%d.%m.%Y")
                        charge_day = day
                    else:
                        raise ValueError("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31")
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É
                success, message = self.db.add_subscription(
                    chat_id, 
                    session['name'], 
                    session['price'], 
                    charge_day,
                    next_charge_date
                )
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                del self.user_sessions[chat_id]
                
                if success:
                    response_text = f"""‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

*üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ:* {session["name"]}
*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:* {session["price"]} —Ä—É–±/–º–µ—Å
*üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:* {next_charge_date}

üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∑–∞ 3 –¥–Ω—è –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è*"""
                else:
                    response_text = f'*‚ùå –û—à–∏–±–∫–∞:* {message}'
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': response_text,
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_main_keyboard()
                }
                
            except ValueError as e:
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': f"""‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì* –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:
*–ü—Ä–∏–º–µ—Ä:*
15.06.2024
25
—Å–µ–π—á–∞—Å""",
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
    
    def _handle_reminder_setup(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        session = self.user_sessions[chat_id]
        
        if text == 'üéØ –ó–∞ 3 –¥–Ω—è':
            days_before = 3
            is_active = True
        elif text == '‚ö° –ó–∞ 1 –¥–µ–Ω—å':
            days_before = 1
            is_active = True
        elif text == 'üìÖ –í –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è':
            days_before = 0
            is_active = True
        elif text == 'üîï –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π':
            days_before = session['current_days_before']
            is_active = False
        elif text == 'üîô –ù–∞–∑–∞–¥':
            del self.user_sessions[chat_id]
            return self.process_message(chat_id, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            del self.user_sessions[chat_id]
            return self.process_message(chat_id, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = self.db.update_reminder_settings(
            chat_id,
            session['subscription_id'],
            days_before,
            is_active
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        del self.user_sessions[chat_id]
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if is_active else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if days_before == 0 else f"–∑–∞ {days_before} –¥–Ω—è"
            response_text = f"""‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*

*üì∫ –ü–æ–¥–ø–∏—Å–∫–∞:* {session["service_name"]}
*üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:* {status}
*‚è∞ –í—Ä–µ–º—è:* {days_text}"""
        else:
            response_text = '*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫*'
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        total_monthly = sum(sub[2] for sub in subscriptions)
        total_yearly = total_monthly * 12
        
        # –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expensive_subs = sorted(subscriptions, key=lambda x: x[2], reverse=True)[:3]
        
        analytics_text = f"""üìä *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*

*–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*
üí∞ –í –º–µ—Å—è—Ü: {total_monthly} —Ä—É–±
üìà –í –≥–æ–¥: {total_yearly} —Ä—É–±

*–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:*
"""
        
        for i, sub in enumerate(expensive_subs, 1):
            analytics_text += f"{i}. {sub[1]} - {sub[2]} —Ä—É–±/–º–µ—Å\n"
        
        analytics_text += f"\nüí° *–°–æ–≤–µ—Ç:* –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü"
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': analytics_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }

handler = BotHandler