from http.server import BaseHTTPRequestHandler
import json
import sqlite3

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('/tmp/subscriptions.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_name TEXT,
                price REAL,
                charge_day INTEGER,
                is_active BOOLEAN DEFAULT TRUE,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

# ==================== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ====================
class TelegramBotHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –±–æ—Ç–∞"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã)"""
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'.encode('utf-8'))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                print(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞: '{text}' –æ—Ç {chat_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                response_data = self._process_command(chat_id, text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                self._send_telegram_response(response_data)
                return
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üìã –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 –¥–ª—è Telegram
        self.send_response(200)
        self.end_headers()
    
    def _process_command(self, chat_id: int, text: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if text == '/start':
            return {
                'chat_id': chat_id,
                'text': """üéØ *–ï–¥–∏–Ω—ã–π –¶–µ–Ω—Ç—Ä –ö–æ–Ω—Ç—Ä–æ–ª—è –ü–æ–¥–ø–∏—Å–æ–∫*

*–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*

üìä *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏—è—Ö  
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ü–æ–º–æ—â—å –≤ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–æ–∫

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ ‚Üì*""",
                'parse_mode': 'Markdown'
            }
        
        elif text == '/subs':
            keyboard = [
                [{"text": "üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å"}, {"text": "üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º"}],
                [{"text": "üé¨ Ozon Premium"}, {"text": "üõí –í–ë –ö–ª—É–±"}],
                [{"text": "üì± –°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏"}, {"text": "üéµ VK –ú—É–∑—ã–∫–∞"}],
                [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É"}, {"text": "üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}],
                [{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}]
            ]
            
            return {
                'chat_id': chat_id,
                'text': "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                'reply_markup': {
                    'keyboard': keyboard,
                    'resize_keyboard': True,
                    'one_time_keyboard': False
                },
                'parse_mode': 'Markdown'
            }
        
        elif text == '/laws':
            return {
                'chat_id': chat_id,
                'text': """‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó*

*–° 15 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞:*

‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ–±—è–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–µ *–ø—Ä—è–º–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ* –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
‚úÖ *–ó–∞–ø—Ä–µ—â–µ–Ω–æ* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è  
‚úÖ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å *–Ω–µ —Å–ª–æ–∂–Ω–µ–µ*, —á–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ

*–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã!*""",
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                conn = sqlite3.connect('/tmp/subscriptions.db')
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = cursor.fetchall()
                conn.close()
                
                response_text = f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–∞–±–ª–∏—Ü—ã: {tables}"
            except Exception as e:
                response_text = f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}"
            
            return {
                'chat_id': chat_id,
                'text': response_text
            }
        
        elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É':
            return {
                'chat_id': chat_id,
                'text': """‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*

–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–ù–∞–∑–≤–∞–Ω–∏–µ - –°—Ç–æ–∏–º–æ—Å—Ç—å - –î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ `Netflix - 599 - 15`
‚Ä¢ `–°–ø–æ—Ä—Ç–∑–∞–ª - 2000 - 1`
‚Ä¢ `Apple Music - 169 - 10`""",
                'parse_mode': 'Markdown'
            }
        
        elif text in ['üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å', 'üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º', 'üé¨ Ozon Premium', 'üõí –í–ë –ö–ª—É–±']:
            prices = {
                'üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': '399‚ÇΩ',
                'üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º': '299‚ÇΩ', 
                'üé¨ Ozon Premium': '199‚ÇΩ',
                'üõí –í–ë –ö–ª—É–±': '199‚ÇΩ'
            }
            
            return {
                'chat_id': chat_id,
                'text': f"üîç *{text}*\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {prices.get(text, '?')} –≤ –º–µ—Å—è—Ü\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?",
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            return {
                'chat_id': chat_id,
                'text': "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                'parse_mode': 'Markdown'
            }
        
        else:
            return {
                'chat_id': chat_id,
                'text': "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
                'parse_mode': 'Markdown'
            }
    
    def _send_telegram_response(self, response_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram"""
        payload = {
            'method': 'sendMessage',
            'chat_id': response_data['chat_id'],
            'text': response_data['text']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'reply_markup' in response_data:
            payload['reply_markup'] = response_data['reply_markup']
        if 'parse_mode' in response_data:
            payload['parse_mode'] = response_data['parse_mode']
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(payload).encode('utf-8'))

# ==================== –í–ê–ñ–ù–û: –≠–ö–°–ü–û–†–¢ –ü–ï–†–ï–ú–ï–ù–ù–û–ô ====================
# Vercel —Ç—Ä–µ–±—É–µ—Ç —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é!
handler = TelegramBotHandler

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()
