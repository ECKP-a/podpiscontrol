from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re
from datetime import datetime
from typing import Optional, Dict, List, Tuple

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    DB_PATH = '/tmp/subscriptions.db'
    DEFAULT_REMINDER_DAYS = 3

# ==================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ====================
class SubscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT NOT NULL,
                    price DECIMAL(10, 2) NOT NULL,
                    charge_day INTEGER NOT NULL CHECK(charge_day BETWEEN 1 AND 31),
                    currency TEXT DEFAULT 'RUB',
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id),
                    UNIQUE(user_id, service_name)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS reminders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    subscription_id INTEGER,
                    reminder_date DATE NOT NULL,
                    is_sent BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (subscription_id) REFERENCES subscriptions (id)
                )
            ''')
            
            conn.commit()
    
    def add_user(self, user_id: int, username: str, first_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO users (user_id, username, first_name)
                    VALUES (?, ?, ?)
                ''', (user_id, username, first_name))
                return True
        except Exception as e:
            print(f"Error adding user: {e}")
            return False
    
    def add_subscription(self, user_id: int, service_name: str, price: float, 
                        charge_day: int, currency: str = 'RUB') -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO subscriptions (user_id, service_name, price, charge_day, currency)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, service_name, price, charge_day, currency))
                return True
        except Exception as e:
            print(f"Error adding subscription: {e}")
            return False
    
    def get_user_subscriptions(self, user_id: int) -> List[Tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT service_name, price, charge_day, currency 
                    FROM subscriptions 
                    WHERE user_id = ? AND is_active = TRUE
                    ORDER BY service_name
                ''', (user_id,))
                return cursor.fetchall()
        except Exception as e:
            print(f"Error getting subscriptions: {e}")
            return []
    
    def delete_subscription(self, user_id: int, service_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE subscriptions 
                    SET is_active = FALSE, updated_at = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND service_name = ?
                ''', (user_id, service_name))
                return cursor.rowcount > 0
        except Exception as e:
            print(f"Error deleting subscription: {e}")
            return False

# ==================== –°–ï–†–í–ò–° –ü–û–î–ü–ò–°–û–ö ====================
class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"""
    
    POPULAR_SUBSCRIPTIONS = {
        'üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': {'price': 399, 'description': '–ö–∏–Ω–æ–ø–æ–∏—Å–∫, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º': {'price': 299, 'description': 'Okko, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'üé¨ Ozon Premium': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ + Kion'},
        'üõí –í–ë –ö–ª—É–±': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ Wildberries'},
        'üì± –°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏': {'price': 300, 'description': '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–≤—è–∑—å'},
        'üéµ VK –ú—É–∑—ã–∫–∞': {'price': 199, 'description': '–ú—É–∑—ã–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'},
        'üí≥ Alfa Only': {'price': 199, 'description': '–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞'},
        'üè¶ –í–¢–ë –ü–ª—é—Å': {'price': 199, 'description': '–ü–æ–¥–ø–∏—Å–∫–∞ –í–¢–ë'},
        'üìÄ –ú–¢–° Premium': {'price': 299, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, —Å–∫–∏–¥–∫–∏'},
        '‚õΩ –ì–∞–∑–ø—Ä–æ–º –ë–æ–Ω—É—Å': {'price': 299, 'description': '–¢–æ–ø–ª–∏–≤–æ, –ø–æ–¥–ø–∏—Å–∫–∏, —Å–∫–∏–¥–∫–∏'}
    }
    
    @classmethod
    def get_popular_subscriptions_keyboard(cls) -> List[List[Dict]]:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        subscriptions = list(cls.POPULAR_SUBSCRIPTIONS.keys())
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        for i in range(0, len(subscriptions), 2):
            row = [{"text": sub} for sub in subscriptions[i:i+2]]
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É"}],
            [{"text": "üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}, {"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}],
            [{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}]
        ])
        
        return keyboard
    
    @classmethod
    def get_subscription_info(cls, service_name: str) -> Optional[Dict]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        return cls.POPULAR_SUBSCRIPTIONS.get(service_name)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
class CommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, subscription_service: SubscriptionService):
        self.service = subscription_service
    
    def handle_start(self, chat_id: int, user_data: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.service.add_user(
            user_id=chat_id,
            username=user_data.get('username', ''),
            first_name=user_data.get('first_name', '')
        )
        
        text = """üéØ *–ï–¥–∏–Ω—ã–π –¶–µ–Ω—Ç—Ä –ö–æ–Ω—Ç—Ä–æ–ª—è –ü–æ–¥–ø–∏—Å–æ–∫*

*–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*

üìä **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏—è—Ö  
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ü–æ–º–æ—â—å –≤ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–æ–∫

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ ‚Üì*"""
        
        keyboard = [
            [{"text": "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"}],
            [{"text": "‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ"}, {"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ]
        
        return {
            'text': text,
            'reply_markup': {
                'keyboard': keyboard,
                'resize_keyboard': True,
                'one_time_keyboard': False
            },
            'parse_mode': 'Markdown'
        }
    
    def handle_subs(self, chat_id: int) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        text = "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        return {
            'text': text,
            'reply_markup': {
                'keyboard': SubscriptionManager.get_popular_subscriptions_keyboard(),
                'resize_keyboard': True
            },
            'parse_mode': 'Markdown'
        }
    
    def handle_subscription_info(self, service_name: str) -> Dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        info = SubscriptionManager.get_subscription_info(service_name)
        
        if info:
            text = f"""üîç *{service_name}*

*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {info['price']}‚ÇΩ/–º–µ—Å
*–û–ø–∏—Å–∞–Ω–∏–µ:* {info['description']}

–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?"""
            
            keyboard = [
                [{"text": f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å {service_name}"}],
                [{"text": "üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º"}]
            ]
        else:
            text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            keyboard = [[{"text": "üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º"}]]
        
        return {
            'text': text,
            'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
            'parse_mode': 'Markdown'
        }
    
    def handle_my_subscriptions(self, chat_id: int) -> Dict:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        subscriptions = self.service.get_user_subscriptions(chat_id)
        
        if subscriptions:
            total = sum(price for _, price, _, _ in subscriptions)
            sub_list = "\n".join(
                f"‚Ä¢ {name}: {price}‚ÇΩ (—Å–ø–∏—Å–∞–Ω–∏–µ {day} —á–∏—Å–ª–∞)"
                for name, price, day, _ in subscriptions
            )
            
            text = f"""üìä *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*

{sub_list}

*–ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü:* {total}‚ÇΩ
*–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:* {len(subscriptions)}"""
        else:
            text = """üìä *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫*

–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏¬ª"""
        
        keyboard = [
            [{"text": "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"}],
            [{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}]
        ]
        
        return {
            'text': text,
            'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
            'parse_mode': 'Markdown'
        }

# ==================== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ====================
class BotHandler(BaseHTTPRequestHandler):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞"""
    
    def __init__(self, *args, **kwargs):
        self.subscription_service = SubscriptionService(Config.DB_PATH)
        self.command_handler = CommandHandler(self.subscription_service)
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('üöÄ Bot is running with advanced logic!'.encode())
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            print(f"üì® Update: {update}")
            
            if 'message' in update:
                self._handle_message(update['message'])
                return
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            import traceback
            print(f"üìã Traceback: {traceback.format_exc()}")
        
        self._send_response(200)
    
    def _handle_message(self, message: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = message['chat']['id']
        text = message.get('text', '').strip()
        user_data = {
            'username': message['chat'].get('username'),
            'first_name': message['chat'].get('first_name', '')
        }
        
        print(f"üí¨ Processing: '{text}' from {chat_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        response_data = self._process_command(chat_id, text, user_data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response_data:
            self._send_telegram_response(chat_id, response_data)
    
    def _process_command(self, chat_id: int, text: str, user_data: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if text == '/start' or text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            return self.command_handler.handle_start(chat_id, user_data)
        
        elif text == '/subs' or text == 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏':
            return self.command_handler.handle_subs(chat_id)
        
        elif text == 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            return self.command_handler.handle_my_subscriptions(chat_id)
        
        elif text in SubscriptionManager.POPULAR_SUBSCRIPTIONS:
            return self.command_handler.handle_subscription_info(text)
        
        elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É':
            return {
                'text': """‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*

–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–ù–∞–∑–≤–∞–Ω–∏–µ - –°—Ç–æ–∏–º–æ—Å—Ç—å - –î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ `Netflix - 599 - 15`
‚Ä¢ `–°–ø–æ—Ä—Ç–∑–∞–ª - 2000 - 1`
‚Ä¢ `Apple Music - 169 - 10`

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –î–∞—Ç–∞ - —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (1-31)""",
                'parse_mode': 'Markdown'
            }
        
        elif text == '/laws' or text == '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ':
            return {
                'text': """‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó*

*–° 15 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞:*

‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ–±—è–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–µ *–ø—Ä—è–º–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ* –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
‚úÖ *–ó–∞–ø—Ä–µ—â–µ–Ω–æ* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è  
‚úÖ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å *–Ω–µ —Å–ª–æ–∂–Ω–µ–µ*, —á–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ

*–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã!*""",
                'parse_mode': 'Markdown'
            }
        
        elif text == '/help' or text == '‚ùì –ü–æ–º–æ—â—å':
            return {
                'text': """‚ùì *–ü–æ–º–æ—â—å*

*–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*

‚Ä¢ *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?* - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏¬ª
‚Ä¢ *–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?* - –ù–∞–ø–∏—à–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]¬ª
‚Ä¢ *–ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?* - –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

*–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - –ø–æ–º–æ–≥—É!*""",
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º':
            return self.command_handler.handle_subs(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        elif self._is_subscription_format(text):
            return self._handle_custom_subscription(chat_id, text)
        
        else:
            return {
                'text': "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start",
                'parse_mode': 'Markdown'
            }
    
    def _is_subscription_format(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        pattern = r'^[^-]+ - \d+ - (?:[1-9]|[12][0-9]|3[01])$'
        return bool(re.match(pattern, text))
    
    def _handle_custom_subscription(self, chat_id: int, text: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            name, price, day = [part.strip() for part in text.split(' - ')]
            price_val = float(price)
            day_val = int(day)
            
            if not (1 <= day_val <= 31):
                return {'text': "‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 31"}
            
            success = self.subscription_service.add_subscription(
                chat_id, name, price_val, day_val
            )
            
            if success:
                return {
                    'text': f"""‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price_val}‚ÇΩ
*–°–ø–∏—Å–∞–Ω–∏–µ:* {day_val} —á–∏—Å–ª–æ

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –µ—ë –≤ ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª""",
                    'parse_mode': 'Markdown'
                }
            else:
                return {'text': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}
                
        except ValueError:
            return {'text': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `Netflix - 599 - 15`", 'parse_mode': 'Markdown'}
        except Exception as e:
            return {'text': f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
    
    def _send_telegram_response(self, chat_id: int, response_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram"""
        response_payload = {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_data['text']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'reply_markup' in response_data:
            response_payload['reply_markup'] = response_data['reply_markup']
        if 'parse_mode' in response_data:
            response_payload['parse_mode'] = response_data['parse_mode']
        
        self._send_response(200, response_payload)
    
    def _send_response(self, status_code: int, body: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        if body:
            self.wfile.write(json.dumps(body).encode())
        else:
            self.wfile.write(json.dumps({'status': 'ok'}).encode())

def main(request):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Vercel"""
    return BotHandler
