from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re
from datetime import datetime, timedelta
import time

class DatabaseManager:
    def __init__(self):
        self.db_path = '/tmp/subscriptions.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT,
                    price REAL,
                    charge_day INTEGER,
                    next_charge_date TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    days_before INTEGER DEFAULT 3,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def add_subscription(self, user_id, service_name, price, charge_day, next_charge_date):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id FROM subscriptions 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            existing = cursor.fetchone()
            if existing:
                conn.close()
                return False, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            cursor.execute('''
                INSERT INTO subscriptions (user_id, service_name, price, charge_day, next_charge_date)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, service_name, price, charge_day, next_charge_date))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT service_name, price, charge_day, next_charge_date 
                FROM subscriptions 
                WHERE user_id = ? AND is_active = TRUE
                ORDER BY service_name
            ''', (user_id,))
            
            subscriptions = cursor.fetchall()
            conn.close()
            return subscriptions
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def delete_subscription(self, user_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET is_active = FALSE 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_notification_settings(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT days_before, is_active FROM notifications 
                WHERE user_id = ?
            ''', (user_id,))
            
            settings = cursor.fetchone()
            conn.close()
            
            if settings:
                return {'days_before': settings[0], 'is_active': bool(settings[1])}
            else:
                default_settings = {'days_before': 3, 'is_active': True}
                self.set_notification_settings(user_id, default_settings)
                return default_settings
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return {'days_before': 3, 'is_active': True}
    
    def set_notification_settings(self, user_id, settings):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO notifications (user_id, days_before, is_active)
                VALUES (?, ?, ?)
            ''', (user_id, settings['days_before'], settings['is_active']))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    POPULAR_SUBSCRIPTIONS = {
        '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': 399,
        '–°–±–µ—Ä–ü—Ä–∞–π–º': 299,
        'Ozon Premium': 199,
        '–í–ë –ö–ª—É–±': 199,
        'VK –ú—É–∑—ã–∫–∞': 199,
        '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞': 169,
        'IVI': 399,
        'START': 299,
        'More.tv': 299,
        'Wink': 349,
        '–í–¢–ë –ü–ª—é—Å': 199,
        '–ú–¢–° Premium': 299
    }
    
    @classmethod
    def get_main_keyboard(cls):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        return {
            'keyboard': [
                [{'text': 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}, {'text': 'üí∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'}],
                [{'text': 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}, {'text': '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ'}],
                [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscriptions_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        subscriptions = list(cls.POPULAR_SUBSCRIPTIONS.keys())
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—è–¥
        for i in range(0, len(subscriptions), 2):
            if i + 1 < len(subscriptions):
                keyboard.append([{'text': subscriptions[i]}, {'text': subscriptions[i+1]}])
            else:
                keyboard.append([{'text': subscriptions[i]}])
        
        keyboard.append([{'text': '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É'}])
        keyboard.append([{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
        
        return {
            'keyboard': keyboard,
            'resize_keyboard': True
        }
    
    @classmethod
    def get_cancel_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
        return {
            'keyboard': [[{'text': '‚ùå –û—Ç–º–µ–Ω–∞'}]],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_notifications_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            'keyboard': [
                [{'text': 'üîî –ó–∞ 3 –¥–Ω—è'}, {'text': 'üîî –ó–∞ 1 –¥–µ–Ω—å'}],
                [{'text': 'üîî –ó–∞ 7 –¥–Ω–µ–π'}, {'text': 'üîï –í—ã–∫–ª—é—á–∏—Ç—å'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_back_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
        return {
            'keyboard': [[{'text': 'üîô –ù–∞–∑–∞–¥'}]],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscription_price(cls, service_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        return cls.POPULAR_SUBSCRIPTIONS.get(service_name)

class BotHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.db = DatabaseManager()
        self.sub_manager = SubscriptionManager()
        self.user_sessions = {}
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('üéØ –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç!'.encode('utf-8'))
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                response = self.process_message(chat_id, text)
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
        except Exception as e:
            print(f'Error: {e}')
        
        self.send_response(200)
        self.end_headers()
    
    def process_message(self, chat_id, text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        if chat_id in self.user_sessions and self.user_sessions[chat_id].get('adding_subscription'):
            return self._handle_subscription_flow(chat_id, text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã/–Ω–∞–∑–∞–¥
        if text in ['‚ùå –û—Ç–º–µ–Ω–∞', 'üîô –ù–∞–∑–∞–¥', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/start']:
            if chat_id in self.user_sessions:
                del self.user_sessions[chat_id]
            return self._show_main_menu(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞)
        if text == '/start':
            return self._show_main_menu(chat_id)
        
        elif text == '/subs':
            return self._show_subscriptions_menu(chat_id)
        
        elif text == '/help':
            return self._show_help(chat_id)
        
        elif text == '/laws':
            return self._show_laws(chat_id)
        
        elif text == '/sets':
            return self._show_notifications_settings(chat_id)
        
        elif text == '/unsub':
            return self._show_unsubscribe(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        elif text == 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            return self._show_my_subscriptions(chat_id)
        
        elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
            return self._show_subscriptions_menu(chat_id)
        
        elif text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            return self._show_notifications_settings(chat_id)
        
        elif text == 'üí∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
            return self._show_analytics(chat_id)
        
        elif text == '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ':
            return self._show_laws(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
        elif text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É':
            return self._start_custom_subscription(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        elif text in self.sub_manager.POPULAR_SUBSCRIPTIONS:
            return self._show_subscription_info(chat_id, text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        elif text.startswith('‚úÖ '):
            service_name = text.replace('‚úÖ ', '')
            return self._add_popular_subscription(chat_id, service_name)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        elif text.startswith('‚ùå '):
            service_name = text.replace('‚ùå ', '')
            return self._delete_subscription(chat_id, service_name)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        elif text.startswith('üîî ') or text == 'üîï –í—ã–∫–ª—é—á–∏—Ç—å':
            return self._handle_notification_setting(chat_id, text)
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return self._show_main_menu(chat_id)
    
    def _show_main_menu(self, chat_id):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """üéØ *–ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫*

*–í–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*

‚öñÔ∏è *–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –§–ó-376 –æ—Ç 15.10.2025*
üîî *–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏—è—Ö*
üìä *–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            'reply_markup': self.sub_manager.get_main_keyboard(),
            'parse_mode': 'Markdown'
        }
    
    def _show_subscriptions_menu(self, chat_id):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': 'üìã *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:',
            'reply_markup': self.sub_manager.get_subscriptions_keyboard(),
            'parse_mode': 'Markdown'
        }
    
    def _show_my_subscriptions(self, chat_id):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if subscriptions:
            total = sum(price for _, price, _, _ in subscriptions)
            sub_list = "\n".join([
                f"‚Ä¢ {name}: {price} —Ä—É–± (—Å–ø–∏—Å–∞–Ω–∏–µ {next_date})"
                for name, price, day, next_date in subscriptions
            ])
            
            message = f"*üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n{sub_list}\n\n*üí∞ –ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü:* {total} —Ä—É–±\n*üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:* {len(subscriptions)}"
        else:
            message = "*üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!"
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_subscription_info(self, chat_id, service_name):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        price = self.sub_manager.get_subscription_price(service_name)
        keyboard = {
            'keyboard': [
                [{'text': f'‚úÖ {service_name}'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥'}]
            ],
            'resize_keyboard': True
        }
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': f'*{service_name}*\n\nüí≥ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price} —Ä—É–±/–º–µ—Å\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?',
            'reply_markup': keyboard,
            'parse_mode': 'Markdown'
        }
    
    def _add_popular_subscription(self, chat_id, service_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        price = self.sub_manager.get_subscription_price(service_name)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        today = datetime.now()
        if today.day > 1:
            next_month = today.replace(day=1) + timedelta(days=32)
            next_charge_date = next_month.replace(day=1).strftime("%d.%m.%Y")
        else:
            next_charge_date = today.replace(day=1).strftime("%d.%m.%Y")
        
        success, message = self.db.add_subscription(
            chat_id, 
            service_name, 
            price, 
            1,
            next_charge_date
        )
        
        if success:
            settings = self.db.get_notification_settings(chat_id)
            days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
            
            response_text = f"""‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üì∫ *{service_name}*
üí≥ {price} —Ä—É–±/–º–µ—Å
üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_date}

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {days_text}*"""
        else:
            response_text = f'‚ùå *{message}*'
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _start_custom_subscription(self, chat_id):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        self.user_sessions[chat_id] = {
            'adding_subscription': True,
            'step': 'name'
        }
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': '‚úçÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_cancel_keyboard()
        }
    
    def _handle_subscription_flow(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        session = self.user_sessions[chat_id]
        
        if session['step'] == 'name':
            if not text or text.strip() == '':
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
            
            session['name'] = text.strip()
            session['step'] = 'price'
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': 'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö:',
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_cancel_keyboard()
            }
        
        elif session['step'] == 'price':
            try:
                clean_text = re.sub(r'[^\d,.]', '', text.replace(',', '.'))
                if not clean_text:
                    raise ValueError("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å")
                    
                price = float(clean_text)
                
                if price <= 0:
                    raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                
                session['price'] = price
                session['step'] = 'date'
                
                current_year = datetime.now().year
                next_year = current_year + 1
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': f"""üìÖ *–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ?*

*–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:*
‚Ä¢ **–î–î.–ú–ú** - –µ—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –≤ {current_year} –≥–æ–¥—É
‚Ä¢ **–î–î.–ú–ú.–ì–ì** - –µ—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –≤ {next_year} –≥–æ–¥—É

*–ü—Ä–∏–º–µ—Ä—ã:*
15.06 - 15 –∏—é–Ω—è {current_year}
25.12.26 - 25 –¥–µ–∫–∞–±—Ä—è {next_year}

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è:""",
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
                
            except (ValueError, TypeError):
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:',
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_cancel_keyboard()
                }
        
        elif session['step'] == 'date':
            try:
                today = datetime.now()
                current_year = today.year
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
                if re.match(r'^\d{1,2}\.\d{1,2}$', text):
                    day, month = map(int, text.split('.'))
                    charge_date = today.replace(month=month, day=day)
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                    if charge_date < today:
                        charge_date = charge_date.replace(year=current_year + 1)
                    
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì (—Å –≥–æ–¥–æ–º)
                elif re.match(r'^\d{1,2}\.\d{1,2}\.\d{2}$', text):
                    day, month, year = map(int, text.split('.'))
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–¥ –∏–∑ –¥–≤—É—Ö —Ü–∏—Ñ—Ä –≤ —á–µ—Ç—ã—Ä–µ
                    full_year = 2000 + year if year < 100 else year
                    charge_date = today.replace(year=full_year, month=month, day=day)
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
                if charge_date <= today:
                    raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                success, message = self.db.add_subscription(
                    chat_id, 
                    session['name'], 
                    session['price'], 
                    charge_day,
                    next_charge_date
                )
                
                del self.user_sessions[chat_id]
                
                if success:
                    settings = self.db.get_notification_settings(chat_id)
                    days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
                    
                    response_text = f"""‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üì∫ *{session["name"]}*
üí≥ {session["price"]} —Ä—É–±/–º–µ—Å
üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_date}

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {days_text}*"""
                else:
                    response_text = f'‚ùå *{message}*'
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': response_text,
                    'parse_mode': 'Markdown',
                    'reply_markup': self.sub_manager.get_main_keyboard()
                }
                
            except ValueError as e:
                error_msg = str(e)
                if "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã" in error_msg:
                    current_year = datetime.now().year
                    return {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': f"""‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*
‚Ä¢ **–î–î.–ú–ú** - –¥–ª—è {current_year} –≥–æ–¥–∞
‚Ä¢ **–î–î.–ú–ú.–ì–ì** - –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä:*
15.06 - 15 –∏—é–Ω—è
25.12.26 - 25 –¥–µ–∫–∞–±—Ä—è 2026

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:""",
                        'parse_mode': 'Markdown',
                        'reply_markup': self.sub_manager.get_cancel_keyboard()
                    }
                else:
                    return {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': f'‚ùå {error_msg}',
                        'parse_mode': 'Markdown',
                        'reply_markup': self.sub_manager.get_cancel_keyboard()
                    }
    
    def _show_notifications_settings(self, chat_id):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        settings = self.db.get_notification_settings(chat_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['is_active'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': f"""üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {days_text}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:""",
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_notifications_keyboard()
        }
    
    def _handle_notification_setting(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        settings = self.db.get_notification_settings(chat_id)
        
        if text == 'üîî –ó–∞ 3 –¥–Ω—è':
            settings.update({'days_before': 3, 'is_active': True})
        elif text == 'üîî –ó–∞ 1 –¥–µ–Ω—å':
            settings.update({'days_before': 1, 'is_active': True})
        elif text == 'üîî –ó–∞ 7 –¥–Ω–µ–π':
            settings.update({'days_before': 7, 'is_active': True})
        elif text == 'üîï –í—ã–∫–ª—é—á–∏—Ç—å':
            settings.update({'is_active': False})
        else:
            return self._show_notifications_settings(chat_id)
        
        success = self.db.set_notification_settings(chat_id, settings)
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['is_active'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
            
            response_text = f"""‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*

‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {days_text}"""
        else:
            response_text = '‚ùå *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫*'
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        total_monthly = sum(price for _, price, _, _ in subscriptions)
        total_yearly = total_monthly * 12
        
        expensive_subs = sorted(subscriptions, key=lambda x: x[1], reverse=True)[:3]
        
        analytics_text = f"""üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*

*–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*
üí≥ –í –º–µ—Å—è—Ü: {total_monthly} —Ä—É–±
üìà –í –≥–æ–¥: {total_yearly} —Ä—É–±

*–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:*
"""
        
        for i, (name, price, day, next_date) in enumerate(expensive_subs, 1):
            analytics_text += f"{i}. {name} - {price} —Ä—É–±/–º–µ—Å\n"
        
        analytics_text += f"\nüí° *–°–æ–≤–µ—Ç:* –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü"
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': analytics_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_help(self, chat_id):
        """–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """‚ùì *–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*

*–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*

‚Ä¢ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
–ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é

‚Ä¢ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsub –≤ –º–µ–Ω—é –±–æ—Ç–∞

‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —Å–ø–∏—Å–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è?
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–∏—Å–∞ –∏ —Å—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –§–ó-376 –æ—Ç 15.10.2025

*–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å?*
–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É - –º—ã –ø–æ–º–æ–∂–µ–º!""",
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_laws(self, chat_id):
        """–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': """‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó –æ—Ç 15.10.2025*

*–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:*

‚Ä¢ –ó–∞–ø—Ä–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
‚Ä¢ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤  
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–ø–∏—Å–∫–∞—Ö

*–í—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É:* 1 –º–∞—Ä—Ç–∞ 2026 –≥–æ–¥–∞

*–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.*""",
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }
    
    def _show_unsubscribe(self, chat_id):
        """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.',
                'parse_mode': 'Markdown',
                'reply_markup': self.sub_manager.get_main_keyboard()
            }
        
        keyboard = []
        for name, price, day, next_date in subscriptions:
            keyboard.append([{'text': f'‚ùå {name}'}])
        
        keyboard.append([{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': 'üóëÔ∏è *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
            'parse_mode': 'Markdown'
        }
    
    def _delete_subscription(self, chat_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        success, message = self.db.delete_subscription(chat_id, service_name)
        
        if success:
            response_text = f'‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞:* {service_name}'
        else:
            response_text = f'‚ùå *–û—à–∏–±–∫–∞:* {message}'
        
        return {
            'method': 'sendMessage',
            'chat_id': chat_id,
            'text': response_text,
            'parse_mode': 'Markdown',
            'reply_markup': self.sub_manager.get_main_keyboard()
        }

handler = BotHandler