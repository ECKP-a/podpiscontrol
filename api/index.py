from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re

class DatabaseManager:
    def __init__(self):
        self.db_path = '/tmp/subscriptions.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT,
                    price REAL,
                    charge_day INTEGER,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def add_subscription(self, user_id, service_name, price, charge_day):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute('''
                SELECT id FROM subscriptions 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            existing = cursor.fetchone()
            if existing:
                conn.close()
                return False, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            cursor.execute('''
                INSERT INTO subscriptions (user_id, service_name, price, charge_day)
                VALUES (?, ?, ?, ?)
            ''', (user_id, service_name, price, charge_day))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT service_name, price, charge_day 
                FROM subscriptions 
                WHERE user_id = ? AND is_active = TRUE
                ORDER BY service_name
            ''', (user_id,))
            
            subscriptions = cursor.fetchall()
            conn.close()
            return subscriptions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def delete_subscription(self, user_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET is_active = FALSE 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    POPULAR_SUBSCRIPTIONS = {
        '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': {'price': 399, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–°–±–µ—Ä–ü—Ä–∞–π–º': {'price': 299, 'description': 'Okko, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'Ozon Premium': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–í–ë –ö–ª—É–±': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'VK –ú—É–∑—ã–∫–∞': {'price': 199, 'description': '–ú—É–∑—ã–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'},
        '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞': {'price': 169, 'description': '–ö–∞—Ç–∞–ª–æ–≥ –º—É–∑—ã–∫–∏'},
        'IVI': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        'START': {'price': 299, 'description': '–†—É—Å—Å–∫–∏–µ —Å–µ—Ä–∏–∞–ª—ã'},
        'More.tv': {'price': 299, 'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'},
        'Wink': {'price': 349, 'description': '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –∫–∏–Ω–æ'},
        'PREMIER': {'price': 399, 'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤—ã –∏ —à–æ—É'},
        '–ö–∏–Ω–æ–ø–æ–∏—Å–∫': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        '–ú–∞–≥–Ω–∏—Ç –ü—Ä–µ–º–∏—É–º': {'price': 199, 'description': '–°–∫–∏–¥–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö'},
        'Alfa Only': {'price': 199, 'description': '–ü—Ä–µ–º–∏—É–º –±–∞–Ω–∫'},
        '–í–¢–ë –ü–ª—é—Å': {'price': 199, 'description': '–ü–æ–¥–ø–∏—Å–∫–∞ –í–¢–ë'},
        '–ú–¢–° Premium': {'price': 299, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, —Å–∫–∏–¥–∫–∏'},
        '–¢-–ë–∞–Ω–∫ Pro': {'price': 299, 'description': '–ü—Ä–µ–º–∏—É–º –±–∞–Ω–∫'},
        '–ì–∞–∑–ø—Ä–æ–º –ë–æ–Ω—É—Å': {'price': 299, 'description': '–¢–æ–ø–ª–∏–≤–æ –∏ –ø–æ–¥–ø–∏—Å–∫–∏'},
        '–ü–∞–∫–µ—Ç X5': {'price': 149, 'description': '–°–∫–∏–¥–∫–∏ –≤ –ü—è—Ç–µ—Ä–æ—á–∫–µ'},
        '–°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏': {'price': 300, 'description': '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–≤—è–∑—å'}
    }
    
    @classmethod
    def get_main_keyboard(cls):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        return {
            'keyboard': [
                [{'text': 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'}],
                [{'text': '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ'}, {'text': '‚ùì –ü–æ–º–æ—â—å'}],
                [{'text': 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}, {'text': '‚ûï –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscriptions_keyboard(cls):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        subscriptions = list(cls.POPULAR_SUBSCRIPTIONS.keys())
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        for i in range(0, min(12, len(subscriptions)), 2):
            row = [
                {'text': subscriptions[i]}, 
                {'text': subscriptions[i+1] if i+1 < len(subscriptions) else 'üìÑ –ï—â—ë...'}
            ]
            keyboard.append(row)
        
        # –°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [{'text': '‚ûï –°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'}, {'text': 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}],
            [{'text': 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}, {'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}]
        ])
        
        return {
            'keyboard': keyboard,
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscription_info(cls, service_name):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        return cls.POPULAR_SUBSCRIPTIONS.get(service_name)

class BotHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.db = DatabaseManager()
        self.sub_manager = SubscriptionManager()
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('Bot is running with enhanced interface!'.encode('utf-8'))
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                response = self.process_message(chat_id, text)
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
        except Exception as e:
            print(f'Error: {e}')
        
        self.send_response(200)
        self.end_headers()
    
    def process_message(self, chat_id, text):
        if text == '/start' or text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': 'üéØ *–ï–¥–∏–Ω—ã–π –¶–µ–Ω—Ç—Ä –ö–æ–Ω—Ç—Ä–æ–ª—è –ü–æ–¥–ø–∏—Å–æ–∫*\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
                'reply_markup': self.sub_manager.get_main_keyboard(),
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏' or text == '/subs':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': 'üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:',
                'reply_markup': self.sub_manager.get_subscriptions_keyboard(),
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                total = sum(price for _, price, _ in subscriptions)
                sub_list = "\n".join([
                    f"‚Ä¢ {name}: {price} —Ä—É–± (—Å–ø–∏—Å–∞–Ω–∏–µ {day} —á–∏—Å–ª–∞)"
                    for name, price, day in subscriptions
                ])
                
                message = f"üìä *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n{sub_list}\n\nüíé *–ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü:* {total} —Ä—É–±\nüìà *–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:* {len(subscriptions)}"
            else:
                message = "üìä *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!"
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
        
        elif text == '‚ûï –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å' or text == '‚ûï –°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞ - –î–∞—Ç–∞`\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ Netflix - 599 - 15\n‚Ä¢ –°–ø–æ—Ä—Ç–∑–∞–ª - 2000 - 1\n‚Ä¢ –Ø–Ω–¥–µ–∫—Å –¢–∞–∫—Å–∏ - 500 - 10',
                'parse_mode': 'Markdown'
            }
        
        elif text in self.sub_manager.POPULAR_SUBSCRIPTIONS:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            info = self.sub_manager.get_subscription_info(text)
            keyboard = {
                'keyboard': [
                    [{'text': f'‚úÖ –î–æ–±–∞–≤–∏—Ç—å {text}'}],
                    [{'text': 'üìã –ö –ø–æ–¥–ø–∏—Å–∫–∞–º'}]
                ],
                'resize_keyboard': True
            }
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'üîç *{text}*\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {info["price"]} —Ä—É–±/–º–µ—Å\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {info["description"]}\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?',
                'reply_markup': keyboard,
                'parse_mode': 'Markdown'
            }
        
        elif text.startswith('‚úÖ –î–æ–±–∞–≤–∏—Ç—å '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            service_name = text.replace('‚úÖ –î–æ–±–∞–≤–∏—Ç—å ', '')
            info = self.sub_manager.get_subscription_info(service_name)
            
            success, message = self.db.add_subscription(chat_id, service_name, info['price'], 1)
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'*{message}*\n\n*–ü–æ–¥–ø–∏—Å–∫–∞:* {service_name}\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {info["price"]} —Ä—É–±/–º–µ—Å\n*–°–ø–∏—Å–∞–Ω–∏–µ:* 1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞',
                'parse_mode': 'Markdown'
            }
        
        elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                keyboard = []
                for name, price, day in subscriptions:
                    keyboard.append([{'text': f'‚ùå –£–¥–∞–ª–∏—Ç—å {name}'}])
                keyboard.append([{'text': 'üìã –ö –ø–æ–¥–ø–∏—Å–∫–∞–º'}])
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': 'üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                    'reply_markup': {'keyboard': keyboard, 'resize_keyboard': True},
                    'parse_mode': 'Markdown'
                }
            else:
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
                }
        
        elif text.startswith('‚ùå –£–¥–∞–ª–∏—Ç—å '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            service_name = text.replace('‚ùå –£–¥–∞–ª–∏—Ç—å ', '')
            success, message = self.db.delete_subscription(chat_id, service_name)
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'*{message}*\n\n–ü–æ–¥–ø–∏—Å–∫–∞: {service_name}',
                'parse_mode': 'Markdown'
            }
        
        elif self._is_subscription_format(text):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            return self._handle_custom_subscription(chat_id, text)
        
        elif text in ['üìã –ö –ø–æ–¥–ø–∏—Å–∫–∞–º', 'üìÑ –ï—â—ë...']:
            return self.process_message(chat_id, 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏')
        
        elif text == '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ' or text == '/laws':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó*\n\n*–° 15 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞:*\n\n‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ–±—è–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–µ –ø—Ä—è–º–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ\n‚úÖ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n‚úÖ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n\n*–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã!*',
                'parse_mode': 'Markdown'
            }
        
        elif text == '‚ùì –ü–æ–º–æ—â—å' or text == '/help':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '‚ùì *–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n*–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n‚Ä¢ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"\n‚Ä¢ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? - –ù–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏]"\n‚Ä¢ –ù–µ –Ω–∞—à–ª–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–°–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"\n\n*–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!*',
                'parse_mode': 'Markdown'
            }
        
        else:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': 'ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
            }
    
    def _is_subscription_format(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        pattern = r'^[^-]+ - \d+ - (?:[1-9]|[12][0-9]|3[01])$'
        return bool(re.match(pattern, text))
    
    def _handle_custom_subscription(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            name, price, day = [part.strip() for part in text.split(' - ')]
            price_val = float(price)
            day_val = int(day)
            
            if not (1 <= day_val <= 31):
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 31'
                }
            
            success, message = self.db.add_subscription(chat_id, name, price_val, day_val)
            
            response_text = f'‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price_val} —Ä—É–±\n*–°–ø–∏—Å–∞–Ω–∏–µ:* {day_val} —á–∏—Å–ª–æ\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –µ—ë –≤ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"' if success else f'‚ùå {message}'
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': response_text,
                'parse_mode': 'Markdown'
            }
            
        except ValueError:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `Netflix - 599 - 15`',
                'parse_mode': 'Markdown'
            }
        except Exception as e:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'
            }

handler = BotHandler
