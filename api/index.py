from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re

class DatabaseManager:
    def __init__(self):
        self.db_path = '/tmp/subscriptions.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT,
                    price REAL,
                    charge_day INTEGER,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def add_subscription(self, user_id, service_name, price, charge_day):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            cursor.execute('''
                SELECT id FROM subscriptions 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            existing = cursor.fetchone()
            if existing:
                conn.close()
                return False, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            cursor.execute('''
                INSERT INTO subscriptions (user_id, service_name, price, charge_day)
                VALUES (?, ?, ?, ?)
            ''', (user_id, service_name, price, charge_day))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT service_name, price, charge_day 
                FROM subscriptions 
                WHERE user_id = ? AND is_active = TRUE
                ORDER BY service_name
            ''', (user_id,))
            
            subscriptions = cursor.fetchall()
            conn.close()
            return subscriptions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def delete_subscription(self, user_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET is_active = FALSE 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"

class BotHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.db = DatabaseManager()
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('Bot is running with database!'.encode('utf-8'))
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                response = self.process_message(chat_id, text)
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
        except Exception as e:
            print(f'Error: {e}')
        
        self.send_response(200)
        self.end_headers()
    
    def process_message(self, chat_id, text):
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
        popular_subscriptions = {
            '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': 399,
            '–°–±–µ—Ä–ü—Ä–∞–π–º': 299,
            'Ozon Premium': 199,
            '–í–ë –ö–ª—É–±': 199,
            'VK –ú—É–∑—ã–∫–∞': 199,
            '–°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏': 300
        }
        
        if text == '/start':
            keyboard = [
                [{'text': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'}],
                [{'text': '–û –∑–∞–∫–æ–Ω–µ'}, {'text': '–ü–æ–º–æ—â—å'}]
            ]
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.',
                'reply_markup': {
                    'keyboard': keyboard,
                    'resize_keyboard': True
                }
            }
        
        elif text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏' or text == '/subs':
            keyboard = [
                [{'text': '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å'}, {'text': '–°–±–µ—Ä–ü—Ä–∞–π–º'}],
                [{'text': 'Ozon Premium'}, {'text': '–í–ë –ö–ª—É–±'}],
                [{'text': 'VK –ú—É–∑—ã–∫–∞'}, {'text': '–°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏'}],
                [{'text': '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É'}, {'text': '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}],
                [{'text': '–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}, {'text': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}]
            ]
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:',
                'reply_markup': {
                    'keyboard': keyboard,
                    'resize_keyboard': True
                }
            }
        
        elif text == '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                total = sum(price for _, price, _ in subscriptions)
                sub_list = "\n".join([
                    f"‚Ä¢ {name}: {price} —Ä—É–± (—Å–ø–∏—Å–∞–Ω–∏–µ {day} —á–∏—Å–ª–∞)"
                    for name, price, day in subscriptions
                ])
                
                message = f"üìä –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{sub_list}\n\nüíé –ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü: {total} —Ä—É–±"
            else:
                message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': message
            }
        
        elif text == '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞ - –î–∞—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä:\nNetflix - 599 - 15\n–°–ø–æ—Ä—Ç–∑–∞–ª - 2000 - 1'
            }
        
        elif text in popular_subscriptions:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
            keyboard = [
                [{'text': f'–î–æ–±–∞–≤–∏—Ç—å {text}'}],
                [{'text': '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º'}]
            ]
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'{text}\n–¶–µ–Ω–∞: {popular_subscriptions[text]} —Ä—É–±/–º–µ—Å\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?',
                'reply_markup': {
                    'keyboard': keyboard,
                    'resize_keyboard': True
                }
            }
        
        elif text.startswith('–î–æ–±–∞–≤–∏—Ç—å '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            service_name = text.replace('–î–æ–±–∞–≤–∏—Ç—å ', '')
            price = popular_subscriptions.get(service_name, 199)
            
            success, message = self.db.add_subscription(chat_id, service_name, price, 1)
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': message
            }
        
        elif text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
            subscriptions = self.db.get_user_subscriptions(chat_id)
            
            if subscriptions:
                keyboard = []
                for name, price, day in subscriptions:
                    keyboard.append([{'text': f'–£–¥–∞–ª–∏—Ç—å {name}'}])
                keyboard.append([{'text': '–ù–∞–∑–∞–¥'}])
                
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                    'reply_markup': {
                        'keyboard': keyboard,
                        'resize_keyboard': True
                    }
                }
            else:
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
                }
        
        elif text.startswith('–£–¥–∞–ª–∏—Ç—å '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            service_name = text.replace('–£–¥–∞–ª–∏—Ç—å ', '')
            success, message = self.db.delete_subscription(chat_id, service_name)
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': message
            }
        
        elif self._is_subscription_format(text):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            return self._handle_custom_subscription(chat_id, text)
        
        elif text in ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥', '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º']:
            return self.process_message(chat_id, '/start')
        
        elif text == '–û –∑–∞–∫–æ–Ω–µ' or text == '/laws':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó –∑–∞—â–∏—â–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —Å 15.10.2025'
            }
        
        elif text == '–ü–æ–º–æ—â—å' or text == '/help':
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–î–ª—è –ø–æ–º–æ—â–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É'
            }
        
        else:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
            }
    
    def _is_subscription_format(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        pattern = r'^[^-]+ - \d+ - (?:[1-9]|[12][0-9]|3[01])$'
        return bool(re.match(pattern, text))
    
    def _handle_custom_subscription(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            name, price, day = [part.strip() for part in text.split(' - ')]
            price_val = float(price)
            day_val = int(day)
            
            if not (1 <= day_val <= 31):
                return {
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 31'
                }
            
            success, message = self.db.add_subscription(chat_id, name, price_val, day_val)
            
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': message
            }
            
        except ValueError:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: Netflix - 599 - 15'
            }
        except Exception as e:
            return {
                'method': 'sendMessage',
                'chat_id': chat_id,
                'text': f'–û—à–∏–±–∫–∞: {str(e)}'
            }

handler = BotHandler
