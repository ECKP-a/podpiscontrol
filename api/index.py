from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import re
from datetime import datetime, timedelta
import time
from urllib.request import urlopen, Request
from urllib.parse import urlencode
import ssl

class DatabaseManager:
    def __init__(self):
        self.db_path = '/tmp/subscriptions.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_name TEXT,
                    price REAL,
                    charge_day INTEGER,
                    next_charge_date TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    days_before INTEGER DEFAULT 3,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS support_requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    user_message TEXT,
                    admin_response TEXT,
                    status TEXT DEFAULT 'new',
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def add_subscription(self, user_id, service_name, price, charge_day, next_charge_date):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id FROM subscriptions 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            existing = cursor.fetchone()
            if existing:
                conn.close()
                return False, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
            cursor.execute('''
                INSERT INTO subscriptions (user_id, service_name, price, charge_day, next_charge_date)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, service_name, price, charge_day, next_charge_date))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def get_user_subscriptions(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, service_name, price, charge_day, next_charge_date 
                FROM subscriptions 
                WHERE user_id = ? AND is_active = TRUE
                ORDER BY service_name
            ''', (user_id,))
            
            subscriptions = cursor.fetchall()
            conn.close()
            return subscriptions
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def delete_subscription(self, user_id, service_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET is_active = FALSE 
                WHERE user_id = ? AND service_name = ? AND is_active = TRUE
            ''', (user_id, service_name))
            
            conn.commit()
            conn.close()
            return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    def update_subscription_date(self, user_id, subscription_id, next_charge_date):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE subscriptions 
                SET next_charge_date = ?
                WHERE id = ? AND user_id = ? AND is_active = TRUE
            ''', (next_charge_date, subscription_id, user_id))
            
            conn.commit()
            conn.close()
            return True, "–î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã"
    
    def get_notification_settings(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT days_before, is_active FROM notifications 
                WHERE user_id = ?
            ''', (user_id,))
            
            settings = cursor.fetchone()
            conn.close()
            
            if settings:
                return {'days_before': settings[0], 'is_active': bool(settings[1])}
            else:
                default_settings = {'days_before': 3, 'is_active': True}
                self.set_notification_settings(user_id, default_settings)
                return default_settings
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return {'days_before': 3, 'is_active': True}
    
    def set_notification_settings(self, user_id, settings):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO notifications (user_id, days_before, is_active)
                VALUES (?, ?, ?)
            ''', (user_id, settings['days_before'], settings['is_active']))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def add_support_request(self, user_id, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO support_requests (user_id, user_message)
                VALUES (?, ?)
            ''', (user_id, message))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            return False

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    POPULAR_SUBSCRIPTIONS = {
        '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': {'price': 399, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–°–±–µ—Ä–ü—Ä–∞–π–º': {'price': 299, 'description': 'Okko, –º—É–∑—ã–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'Ozon Premium': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        '–í–ë –ö–ª—É–±': {'price': 199, 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
        'VK –ú—É–∑—ã–∫–∞': {'price': 199, 'description': '–ú—É–∑—ã–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'},
        '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞': {'price': 169, 'description': '–ö–∞—Ç–∞–ª–æ–≥ –º—É–∑—ã–∫–∏'},
        'IVI': {'price': 399, 'description': '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã'},
        'START': {'price': 299, 'description': '–†—É—Å—Å–∫–∏–µ —Å–µ—Ä–∏–∞–ª—ã'},
        'More.tv': {'price': 299, 'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'},
        'Wink': {'price': 349, 'description': '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º –∫–∏–Ω–æ'},
        '–í–¢–ë –ü–ª—é—Å': {'price': 199, 'description': '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –í–¢–ë'},
        '–ú–¢–° Premium': {'price': 299, 'description': '–ö–∏–Ω–æ, –º—É–∑—ã–∫–∞, —Å–∫–∏–¥–∫–∏'}
    }
    
    @classmethod
    def get_main_keyboard(cls):
        return {
            'keyboard': [
                [{'text': 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}, {'text': 'üí∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'}],
                [{'text': 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}, {'text': '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ'}],
                [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscriptions_keyboard(cls):
        subscriptions = list(cls.POPULAR_SUBSCRIPTIONS.keys())
        keyboard = []
        
        for i in range(0, len(subscriptions), 2):
            if i + 1 < len(subscriptions):
                keyboard.append([{'text': subscriptions[i]}, {'text': subscriptions[i+1]}])
            else:
                keyboard.append([{'text': subscriptions[i]}])
        
        keyboard.append([{'text': '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É'}])
        keyboard.append([{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
        
        return {
            'keyboard': keyboard,
            'resize_keyboard': True
        }
    
    @classmethod
    def get_cancel_keyboard(cls):
        return {
            'keyboard': [[{'text': '‚ùå –û—Ç–º–µ–Ω–∞'}]],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_notifications_keyboard(cls):
        return {
            'keyboard': [
                [{'text': 'üîî –ó–∞ 3 –¥–Ω—è'}, {'text': 'üîî –ó–∞ 1 –¥–µ–Ω—å'}],
                [{'text': 'üîî –ó–∞ 7 –¥–Ω–µ–π'}, {'text': 'üîï –í—ã–∫–ª—é—á–∏—Ç—å'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥'}]
            ],
            'resize_keyboard': True
        }
    
    @classmethod
    def get_subscription_info(cls, service_name):
        return cls.POPULAR_SUBSCRIPTIONS.get(service_name)

class BotHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.db = DatabaseManager()
        self.sub_manager = SubscriptionManager()
        self.user_sessions = {}
        self.telegram_token = "8459093402:AAG8iTjrqDuv3OmEkF4aLpyiZzZrsOqC_4o"
        self.telegram_url = f"https://api.telegram.org/bot{self.telegram_token}/"
        super().__init__(*args, **kwargs)
    
    def _send_telegram_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
        try:
            payload = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
            
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            data = json.dumps(payload).encode('utf-8')
            headers = {'Content-Type': 'application/json'}
            
            request = Request(
                f"{self.telegram_url}sendMessage",
                data=data,
                headers=headers
            )
            
            context = ssl._create_unverified_context()
            response = urlopen(request, context=context, timeout=10)
            response.read()
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('üéØ –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç!'.encode('utf-8'))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '').strip()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.process_message(chat_id, text)
                
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'status': 'ok'}).encode('utf-8'))
                
        except Exception as e:
            print(f'‚ùå Error processing message: {e}')
            self.send_response(200)
            self.end_headers()
    
    def process_message(self, chat_id, text):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: '{text}'")
        
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if chat_id in self.user_sessions:
            session = self.user_sessions[chat_id]
            print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session}")
            
            if session.get('adding_subscription'):
                print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
                self._handle_subscription_flow(chat_id, text)
                return
            elif session.get('waiting_support'):
                print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
                self._handle_support_request(chat_id, text)
                return
            elif session.get('changing_date'):
                print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã")
                self._handle_date_change(chat_id, text)
                return
        
        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text in ['‚ùå –û—Ç–º–µ–Ω–∞', 'üîô –ù–∞–∑–∞–¥', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/start']:
            if chat_id in self.user_sessions:
                del self.user_sessions[chat_id]
            self._show_main_menu(chat_id)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text == '/start':
            self._show_main_menu(chat_id)
        elif text == '/subs':
            self._show_subscriptions_menu(chat_id)
        elif text == '/help':
            self._start_support_request(chat_id)
        elif text == '/laws':
            self._show_laws(chat_id)
        elif text == '/sets':
            self._show_notifications_settings(chat_id)
        elif text == '/unsub':
            self._show_unsubscribe(chat_id)
        elif text == 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
            self._show_my_subscriptions(chat_id)
        elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
            self._show_subscriptions_menu(chat_id)
        elif text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            self._show_notifications_settings(chat_id)
        elif text == 'üí∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
            self._show_analytics(chat_id)
        elif text == '‚öñÔ∏è –û –∑–∞–∫–æ–Ω–µ':
            self._show_laws(chat_id)
        elif text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É':
            self._start_custom_subscription(chat_id)
        elif text in self.sub_manager.POPULAR_SUBSCRIPTIONS:
            self._show_subscription_info(chat_id, text)
        elif text.startswith('‚úÖ '):
            service_name = text.replace('‚úÖ ', '')
            self._add_popular_subscription(chat_id, service_name)
        elif text.startswith('üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É '):
            subscription_id = text.replace('üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É ', '')
            self._start_date_change(chat_id, subscription_id)
        elif text.startswith('‚ùå –£–¥–∞–ª–∏—Ç—å '):
            service_name = text.replace('‚ùå –£–¥–∞–ª–∏—Ç—å ', '')
            self._delete_subscription(chat_id, service_name)
        elif text.startswith('üîî ') or text == 'üîï –í—ã–∫–ª—é—á–∏—Ç—å':
            self._handle_notification_setting(chat_id, text)
        else:
            # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self._show_main_menu(chat_id)
    
    def _start_support_request(self, chat_id):
        """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        print(f"üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è {chat_id}")
        self.user_sessions[chat_id] = {
            'waiting_support': True
        }
        
        self._send_telegram_message(
            chat_id,
            """üí¨ *–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*

–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º!

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:""",
            self.sub_manager.get_cancel_keyboard()
        )
    
    def _handle_support_request(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {text}")
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_sessions[chat_id]
            self._show_main_menu(chat_id)
            return
        
        success = self.db.add_support_request(chat_id, text)
        
        del self.user_sessions[chat_id]
        
        if success:
            response_text = """‚úÖ *–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!*

–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.

üí° *–û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.*
üìß *–î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: support@podpiski-control.ru*"""
        else:
            response_text = "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è*"
        
        self._send_telegram_message(
            chat_id,
            response_text,
            self.sub_manager.get_main_keyboard()
        )
    
    def _start_custom_subscription(self, chat_id):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        print(f"üéØ –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {chat_id}")
        self.user_sessions[chat_id] = {
            'adding_subscription': True,
            'step': 'name'
        }
        
        self._send_telegram_message(
            chat_id,
            '‚úçÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
            self.sub_manager.get_cancel_keyboard()
        )
    
    def _handle_subscription_flow(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        session = self.user_sessions[chat_id]
        print(f"üîÑ –®–∞–≥ {session['step']}: {text}")
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_sessions[chat_id]
            self._show_main_menu(chat_id)
            return
        
        if session['step'] == 'name':
            if not text or text.strip() == '':
                self._send_telegram_message(
                    chat_id,
                    '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
                    self.sub_manager.get_cancel_keyboard()
                )
                return
            
            session['name'] = text.strip()
            session['step'] = 'price'
            
            self._send_telegram_message(
                chat_id,
                'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö:',
                self.sub_manager.get_cancel_keyboard()
            )
        
        elif session['step'] == 'price':
            try:
                clean_text = re.sub(r'[^\d,.]', '', text.replace(',', '.'))
                if not clean_text:
                    raise ValueError("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å")
                    
                price = float(clean_text)
                
                if price <= 0:
                    raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                
                session['price'] = price
                session['step'] = 'date'
                
                current_year = datetime.now().year
                
                self._send_telegram_message(
                    chat_id,
                    f"""üìÖ *–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ?*

*–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:*
‚Ä¢ **–î–î.–ú–ú** - –µ—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –≤ {current_year} –≥–æ–¥—É
‚Ä¢ **–î–î.–ú–ú.–ì–ì** - –µ—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É

*–ü—Ä–∏–º–µ—Ä—ã:*
15.06 - 15 –∏—é–Ω—è {current_year}
25.12.25 - 25 –¥–µ–∫–∞–±—Ä—è {current_year + 1}

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è:""",
                    self.sub_manager.get_cancel_keyboard()
                )
                
            except (ValueError, TypeError):
                self._send_telegram_message(
                    chat_id,
                    '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:',
                    self.sub_manager.get_cancel_keyboard()
                )
        
        elif session['step'] == 'date':
            try:
                today = datetime.now()
                current_year = today.year
                
                if re.match(r'^\d{1,2}\.\d{1,2}$', text):
                    day, month = map(int, text.split('.'))
                    charge_date = today.replace(month=month, day=day, year=current_year)
                    
                    if charge_date < today:
                        charge_date = charge_date.replace(year=current_year + 1)
                    
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                elif re.match(r'^\d{1,2}\.\d{1,2}\.\d{2}$', text):
                    day, month, year = map(int, text.split('.'))
                    full_year = 2000 + year if year < 100 else year
                    charge_date = today.replace(year=full_year, month=month, day=day)
                    next_charge_date = charge_date.strftime("%d.%m.%Y")
                    charge_day = charge_date.day
                
                else:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
                if charge_date <= today:
                    raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                
                success, message = self.db.add_subscription(
                    chat_id, 
                    session['name'], 
                    session['price'], 
                    charge_day,
                    next_charge_date
                )
                
                del self.user_sessions[chat_id]
                
                if success:
                    settings = self.db.get_notification_settings(chat_id)
                    days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
                    
                    response_text = f"""‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üì∫ *{session["name"]}*
üí≥ {session["price"]} —Ä—É–±/–º–µ—Å
üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_date}

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {days_text}*

üí° *–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"*"""
                else:
                    response_text = f'‚ùå *{message}*'
                
                self._send_telegram_message(
                    chat_id,
                    response_text,
                    self.sub_manager.get_main_keyboard()
                )
                
            except ValueError as e:
                current_year = datetime.now().year
                self._send_telegram_message(
                    chat_id,
                    f"""‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*
‚Ä¢ **–î–î.–ú–ú** - –¥–ª—è {current_year} –≥–æ–¥–∞
‚Ä¢ **–î–î.–ú–ú.–ì–ì** - –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä:*
15.06 - 15 –∏—é–Ω—è
25.12.25 - 25 –¥–µ–∫–∞–±—Ä—è {current_year + 1}

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:""",
                    self.sub_manager.get_cancel_keyboard()
                )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _show_main_menu(self, chat_id):
        self._send_telegram_message(
            chat_id,
            """üéØ *–ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            self.sub_manager.get_main_keyboard()
        )
    
    def _show_subscriptions_menu(self, chat_id):
        self._send_telegram_message(
            chat_id,
            'üìã *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:',
            self.sub_manager.get_subscriptions_keyboard()
        )
    
    def _show_my_subscriptions(self, chat_id):
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            self._send_telegram_message(
                chat_id,
                "*üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!",
                self.sub_manager.get_main_keyboard()
            )
            return
        
        total = sum(price for _, _, price, _, _ in subscriptions)
        sub_list = []
        
        for sub_id, name, price, day, next_date in subscriptions:
            sub_list.append(f"‚Ä¢ *{name}*: {price} —Ä—É–±\n  üìÖ –°–ª–µ–¥. —Å–ø–∏—Å–∞–Ω–∏–µ: {next_date}")
        
        message = f"""*üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*

{"\n".join(sub_list)}

*üí∞ –ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü:* {total} —Ä—É–±
*üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:* {len(subscriptions)}"""
        
        keyboard = []
        for sub_id, name, price, day, next_date in subscriptions:
            keyboard.append([{'text': f'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É {sub_id}'}])
            keyboard.append([{'text': f'‚ùå –£–¥–∞–ª–∏—Ç—å {name}'}])
        
        keyboard.append([{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
        
        self._send_telegram_message(
            chat_id,
            message,
            {'keyboard': keyboard, 'resize_keyboard': True}
        )
    
    def _show_subscription_info(self, chat_id, service_name):
        info = self.sub_manager.get_subscription_info(service_name)
        keyboard = {
            'keyboard': [
                [{'text': f'‚úÖ {service_name}'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥'}]
            ],
            'resize_keyboard': True
        }
        
        self._send_telegram_message(
            chat_id,
            f'*{service_name}*\n\nüí≥ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {info["price"]} —Ä—É–±/–º–µ—Å\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {info["description"]}\n\n–î–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?',
            keyboard
        )
    
    def _add_popular_subscription(self, chat_id, service_name):
        info = self.sub_manager.get_subscription_info(service_name)
        
        today = datetime.now()
        if today.day > 1:
            next_month = today.replace(day=1) + timedelta(days=32)
            next_charge_date = next_month.replace(day=1).strftime("%d.%m.%Y")
        else:
            next_charge_date = today.replace(day=1).strftime("%d.%m.%Y")
        
        success, message = self.db.add_subscription(
            chat_id, 
            service_name, 
            info['price'], 
            1,
            next_charge_date
        )
        
        if success:
            settings = self.db.get_notification_settings(chat_id)
            days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
            
            response_text = f"""‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üì∫ *{service_name}*
üí≥ {info["price"]} —Ä—É–±/–º–µ—Å
üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_date}

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {days_text}*"""
        else:
            response_text = f'‚ùå *{message}*'
        
        self._send_telegram_message(
            chat_id,
            response_text,
            self.sub_manager.get_main_keyboard()
        )
    
    def _start_date_change(self, chat_id, subscription_id):
        self.user_sessions[chat_id] = {
            'changing_date': True,
            'subscription_id': subscription_id
        }
        
        current_year = datetime.now().year
        
        self._send_telegram_message(
            chat_id,
            f"""üìÖ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è*

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–ø–∏—Å–∞–Ω–∏—è:""",
            self.sub_manager.get_cancel_keyboard()
        )
    
    def _handle_date_change(self, chat_id, text):
        session = self.user_sessions[chat_id]
        subscription_id = session['subscription_id']
        
        try:
            today = datetime.now()
            current_year = today.year
            
            if re.match(r'^\d{1,2}\.\d{1,2}$', text):
                day, month = map(int, text.split('.'))
                charge_date = today.replace(month=month, day=day, year=current_year)
                
                if charge_date < today:
                    charge_date = charge_date.replace(year=current_year + 1)
                
                next_charge_date = charge_date.strftime("%d.%m.%Y")
            
            elif re.match(r'^\d{1,2}\.\d{1,2}\.\d{2}$', text):
                day, month, year = map(int, text.split('.'))
                full_year = 2000 + year if year < 100 else year
                charge_date = today.replace(year=full_year, month=month, day=day)
                next_charge_date = charge_date.strftime("%d.%m.%Y")
            
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
            if charge_date <= today:
                raise ValueError("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            
            success, message = self.db.update_subscription_date(chat_id, subscription_id, next_charge_date)
            
            del self.user_sessions[chat_id]
            
            if success:
                response_text = f"‚úÖ *–î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n–ù–æ–≤–∞—è –¥–∞—Ç–∞: {next_charge_date}"
            else:
                response_text = f'‚ùå *{message}*'
            
            self._send_telegram_message(
                chat_id,
                response_text,
                self.sub_manager.get_main_keyboard()
            )
            
        except ValueError as e:
            self._send_telegram_message(
                chat_id,
                f"‚ùå {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì:",
                self.sub_manager.get_cancel_keyboard()
            )
    
    def _show_notifications_settings(self, chat_id):
        settings = self.db.get_notification_settings(chat_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['is_active'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
        
        self._send_telegram_message(
            chat_id,
            f"""üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {days_text}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:""",
            self.sub_manager.get_notifications_keyboard()
        )
    
    def _handle_notification_setting(self, chat_id, text):
        settings = self.db.get_notification_settings(chat_id)
        
        if text == 'üîî –ó–∞ 3 –¥–Ω—è':
            settings.update({'days_before': 3, 'is_active': True})
        elif text == 'üîî –ó–∞ 1 –¥–µ–Ω—å':
            settings.update({'days_before': 1, 'is_active': True})
        elif text == 'üîî –ó–∞ 7 –¥–Ω–µ–π':
            settings.update({'days_before': 7, 'is_active': True})
        elif text == 'üîï –í—ã–∫–ª—é—á–∏—Ç—å':
            settings.update({'is_active': False})
        else:
            self._show_notifications_settings(chat_id)
            return
        
        success = self.db.set_notification_settings(chat_id, settings)
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['is_active'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            days_text = "–≤ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è" if settings['days_before'] == 0 else f"–∑–∞ {settings['days_before']} –¥–Ω—è"
            
            response_text = f"""‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*

‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {days_text}"""
        else:
            response_text = '‚ùå *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫*'
        
        self._send_telegram_message(
            chat_id,
            response_text,
            self.sub_manager.get_main_keyboard()
        )
    
    def _show_analytics(self, chat_id):
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            self._send_telegram_message(
                chat_id,
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
                self.sub_manager.get_main_keyboard()
            )
            return
        
        total_monthly = sum(price for _, _, price, _, _ in subscriptions)
        total_yearly = total_monthly * 12
        
        expensive_subs = sorted(subscriptions, key=lambda x: x[2], reverse=True)[:3]
        
        analytics_text = f"""üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*

*–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*
üí≥ –í –º–µ—Å—è—Ü: {total_monthly} —Ä—É–±
üìà –í –≥–æ–¥: {total_yearly} —Ä—É–±

*–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:*
"""
        
        for i, (sub_id, name, price, day, next_date) in enumerate(expensive_subs, 1):
            analytics_text += f"{i}. {name} - {price} —Ä—É–±/–º–µ—Å\n"
        
        analytics_text += f"\nüí° *–°–æ–≤–µ—Ç:* –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü"
        
        self._send_telegram_message(
            chat_id,
            analytics_text,
            self.sub_manager.get_main_keyboard()
        )
    
    def _show_laws(self, chat_id):
        self._send_telegram_message(
            chat_id,
            """‚öñÔ∏è *–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó –æ—Ç 15.10.2025*

*–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:*
‚Ä¢ –ó–∞–ø—Ä–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
‚Ä¢ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤

*–í—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É:* 1 –º–∞—Ä—Ç–∞ 2026 –≥–æ–¥–∞""",
            self.sub_manager.get_main_keyboard()
        )
    
    def _show_unsubscribe(self, chat_id):
        subscriptions = self.db.get_user_subscriptions(chat_id)
        
        if not subscriptions:
            self._send_telegram_message(
                chat_id,
                '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.',
                self.sub_manager.get_main_keyboard()
            )
            return
        
        keyboard = []
        for sub_id, name, price, day, next_date in subscriptions:
            keyboard.append([{'text': f'‚ùå {name}'}])
        
        keyboard.append([{'text': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}])
        
        self._send_telegram_message(
            chat_id,
            'üóëÔ∏è *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            {'keyboard': keyboard, 'resize_keyboard': True}
        )
    
    def _delete_subscription(self, chat_id, service_name):
        success, message = self.db.delete_subscription(chat_id, service_name)
        
        if success:
            response_text = f'‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞:* {service_name}'
        else:
            response_text = f'‚ùå *–û—à–∏–±–∫–∞:* {message}'
        
        self._send_telegram_message(
            chat_id,
            response_text,
            self.sub_manager.get_main_keyboard()
        )

handler = BotHandler