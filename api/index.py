from http.server import BaseHTTPRequestHandler
import json
import sqlite3
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('/tmp/subscriptions.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_name TEXT,
                price REAL,
                charge_day INTEGER,
                is_active BOOLEAN DEFAULT TRUE,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("Database initialized successfully")
    except Exception as e:
        print(f"Database init error: {e}")

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('Bot is running successfully!'.encode())
    
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            print(f"Received: {update}")
            
            if 'message' in update:
                chat_id = update['message']['chat']['id']
                text = update['message'].get('text', '')
                
                print(f"Processing: {text} from {chat_id}")
                
                if text == '/start':
                    response_text = """–Ø ‚Äî –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–ø–∏—Å–æ–∫.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/subs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏  
/laws - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–µ
/unsub - –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫
/help - –ü–æ–º–æ—â—å"""
                    
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == '/subs':
                    keyboard = [
                        [{"text": "üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å"}, {"text": "üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º"}],
                        [{"text": "üé¨ Ozon Premium"}, {"text": "üõí –í–ë –ö–ª—É–±"}],
                        [{"text": "üì± –°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏"}, {"text": "üéµ VK –ú—É–∑—ã–∫–∞"}],
                        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É"}, {"text": "üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}],
                        [{"text": "üîô –ù–∞–∑–∞–¥"}]
                    ]
                    
                    response_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
                    
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text,
                        'reply_markup': {
                            'keyboard': keyboard,
                            'resize_keyboard': True,
                            'one_time_keyboard': False
                        }
                    }
                
                elif text in ['üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å', 'üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º', 'üé¨ Ozon Premium', 'üõí –í–ë –ö–ª—É–±', 'üì± –°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏']:
                    prices = {
                        'üõçÔ∏è –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å': '399‚ÇΩ',
                        'üì∫ –°–±–µ—Ä–ü—Ä–∞–π–º': '299‚ÇΩ', 
                        'üé¨ Ozon Premium': '199‚ÇΩ',
                        'üõí –í–ë –ö–ª—É–±': '199‚ÇΩ',
                        'üì± –°–æ—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏': '–æ—Ç 300‚ÇΩ'
                    }
                    
                    response_text = f"{text}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {prices.get(text, '?')} –≤ –º–µ—Å—è—Ü"
                    
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == '/laws':
                    response_text = "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ 376-–§–ó –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–∞–≤–∞ —Å 15.10.2025"
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == '/unsub':
                    response_text = "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ'"
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == '/help':
                    response_text = "–ü–æ–º–æ—â—å: –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É"
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É':
                    response_text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞ - –î–∞—Ç–∞\n–ü—Ä–∏–º–µ—Ä: Netflix - 599 - 15"
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == 'üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    try:
                        conn = sqlite3.connect('/tmp/subscriptions.db')
                        cursor = conn.cursor()
                        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                        tables = cursor.fetchall()
                        conn.close()
                        
                        response_text = f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–∞–±–ª–∏—Ü—ã: {tables}"
                    except Exception as e:
                        response_text = f"–û—à–∏–±–∫–∞ –ë–î: {e}"
                    
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                elif text == 'üîô –ù–∞–∑–∞–¥':
                    response_text = "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                else:
                    response_text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /start, /subs, /laws, /unsub, /help"
                    response_data = {
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text
                    }
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response_data).encode())
                return
                
        except Exception as e:
            print(f"Error: {e}")
        
        self.send_response(200)
        self.end_headers()

def main(request):
    init_db()
    return Handler()
